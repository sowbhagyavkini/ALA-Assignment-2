{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "BZLeh7V3Pfha"
      },
      "source": [
        "import numpy as np"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PX9OpV6RaEtr"
      },
      "source": [
        "Problem-1: A network consists of $n$ stations, labeled $1,\\ldots,n.$ A path through the network is a subset of the stations. This data can be represented as an $N\\times n$-matrix $P$, where $$P_{ij} =\\begin{cases}1,& \\text{if station } j \\text{ is on path } i,\\\\0,&\\text{otherwise}.\\end{cases}$$ The code snippet below simulates the matrix $P$ for $10$ stations and $100$ paths."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qQ4o9NxBBWdX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "487c4441-2690-48db-d42f-6a38cfca1db4"
      },
      "source": [
        "# Simulating a network tomography matrix\n",
        "np.random.seed(1)\n",
        "npaths = 100\n",
        "nstations = 10\n",
        "P = np.random.choice(np.arange(0,2), (npaths, nstations))\n",
        "print(P)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 1 0 0 1 1 1 1 1 0]\n",
            " [0 1 0 1 1 0 0 1 0 0]\n",
            " [0 1 0 0 1 0 0 0 1 0]\n",
            " [0 0 1 1 1 1 1 0 0 0]\n",
            " [1 1 1 1 1 1 0 1 1 0]\n",
            " [0 1 0 0 1 1 1 0 1 0]\n",
            " [0 1 1 0 1 1 1 1 0 0]\n",
            " [1 1 0 0 0 0 1 1 1 0]\n",
            " [1 0 0 1 1 0 1 1 0 1]\n",
            " [0 0 1 1 1 0 1 1 0 1]\n",
            " [1 1 1 0 0 0 0 0 1 1]\n",
            " [1 1 1 1 1 0 0 0 0 0]\n",
            " [0 1 1 1 1 1 1 0 0 1]\n",
            " [1 0 0 1 0 0 0 1 1 1]\n",
            " [1 1 0 1 0 1 0 0 0 1]\n",
            " [1 1 0 1 0 0 0 0 1 0]\n",
            " [1 0 1 1 1 0 0 0 0 0]\n",
            " [0 1 0 0 1 0 0 1 1 0]\n",
            " [0 0 1 0 0 0 0 1 0 0]\n",
            " [0 0 1 1 0 0 1 1 1 0]\n",
            " [0 0 0 0 1 1 1 0 1 1]\n",
            " [0 0 0 1 1 0 1 1 1 0]\n",
            " [1 1 1 1 0 1 0 0 1 0]\n",
            " [1 0 1 1 0 1 1 0 1 1]\n",
            " [1 0 1 0 1 0 1 1 1 1]\n",
            " [1 1 0 0 1 1 0 0 0 1]\n",
            " [1 0 0 0 0 0 1 1 1 1]\n",
            " [1 1 1 0 0 1 0 0 0 1]\n",
            " [0 1 0 1 0 0 0 0 1 1]\n",
            " [0 0 0 1 0 1 1 0 0 1]\n",
            " [0 1 0 0 0 1 0 1 0 1]\n",
            " [1 1 0 1 0 1 1 1 1 0]\n",
            " [0 1 0 0 0 0 1 1 0 1]\n",
            " [1 0 0 1 1 1 1 1 1 1]\n",
            " [0 0 0 0 0 0 0 1 0 0]\n",
            " [0 0 0 1 1 1 1 0 0 0]\n",
            " [1 0 1 0 1 0 0 0 0 0]\n",
            " [0 1 0 0 0 1 0 1 1 0]\n",
            " [0 1 1 0 1 0 1 0 1 1]\n",
            " [0 0 1 0 0 0 0 0 1 1]\n",
            " [0 0 1 1 1 1 0 1 0 1]\n",
            " [0 0 1 0 1 0 1 0 0 0]\n",
            " [0 1 0 0 1 1 1 1 1 0]\n",
            " [0 0 1 0 1 1 0 1 1 0]\n",
            " [0 1 1 0 1 1 1 1 0 1]\n",
            " [0 0 0 0 0 1 0 0 0 0]\n",
            " [1 0 0 1 0 1 1 0 1 0]\n",
            " [1 0 1 0 0 0 0 1 0 1]\n",
            " [1 1 1 1 0 1 0 1 0 0]\n",
            " [0 0 1 1 0 0 0 0 1 0]\n",
            " [0 1 1 1 1 0 1 1 0 1]\n",
            " [0 0 1 0 0 0 1 1 1 1]\n",
            " [0 0 0 0 1 0 1 1 0 0]\n",
            " [1 1 0 1 1 0 0 0 0 1]\n",
            " [0 0 0 0 1 0 1 0 0 1]\n",
            " [1 1 0 0 1 0 0 0 0 0]\n",
            " [1 1 1 1 1 0 0 1 1 0]\n",
            " [0 0 0 1 0 0 0 1 0 1]\n",
            " [0 0 0 0 1 0 0 1 1 0]\n",
            " [1 1 1 1 1 0 0 0 0 0]\n",
            " [0 0 0 1 0 0 0 1 0 1]\n",
            " [0 1 0 0 1 1 1 1 1 1]\n",
            " [0 0 0 1 0 0 1 0 1 1]\n",
            " [0 0 0 1 1 0 1 1 0 0]\n",
            " [0 0 1 0 0 1 0 0 0 0]\n",
            " [0 0 1 1 0 0 0 0 0 0]\n",
            " [1 1 0 1 0 0 1 0 1 1]\n",
            " [1 0 0 0 1 1 1 1 1 0]\n",
            " [1 0 1 0 0 0 0 0 0 0]\n",
            " [0 0 0 1 0 1 0 0 1 1]\n",
            " [0 0 1 1 1 0 1 1 0 1]\n",
            " [1 1 1 0 1 0 1 1 1 1]\n",
            " [0 1 1 1 0 0 1 0 1 1]\n",
            " [0 0 1 0 0 0 0 0 0 1]\n",
            " [1 1 0 0 1 0 1 0 0 1]\n",
            " [1 1 0 1 0 0 0 1 1 1]\n",
            " [1 0 1 0 1 0 0 0 0 1]\n",
            " [0 0 0 1 1 1 1 0 0 0]\n",
            " [1 0 0 0 1 1 0 0 0 1]\n",
            " [1 0 1 1 1 1 1 1 0 1]\n",
            " [1 0 0 1 1 1 1 1 1 0]\n",
            " [0 0 0 1 1 1 1 1 1 0]\n",
            " [0 1 1 1 0 0 1 1 0 0]\n",
            " [0 0 1 1 0 0 0 0 1 0]\n",
            " [1 1 0 0 0 0 0 1 0 0]\n",
            " [1 0 0 0 1 0 1 0 0 0]\n",
            " [1 1 1 1 0 0 0 1 0 1]\n",
            " [0 1 1 0 1 0 1 0 0 1]\n",
            " [1 0 1 0 0 1 0 0 1 0]\n",
            " [1 0 1 0 1 1 1 1 1 1]\n",
            " [1 0 0 1 1 0 0 1 1 0]\n",
            " [1 1 1 0 0 0 1 0 1 1]\n",
            " [1 0 1 0 0 0 1 1 0 1]\n",
            " [0 0 1 0 0 0 1 0 0 1]\n",
            " [0 1 1 1 0 1 0 0 0 1]\n",
            " [0 1 1 0 0 1 0 1 1 0]\n",
            " [0 1 0 0 1 1 1 1 1 1]\n",
            " [1 1 0 1 1 0 1 1 1 0]\n",
            " [0 0 0 0 0 0 1 0 1 0]\n",
            " [0 1 1 0 0 0 0 0 0 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "niDTcQYnbBs9"
      },
      "source": [
        "**Problem-1.1**: Busy paths have *at least* 7 stations in them? What are the busy paths and how many of them do we have?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ve3mj2YYChQc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44af8ecf-88fe-481f-f161-f953444cbe42"
      },
      "source": [
        "result = np.sum(np.dot(P, np.ones((nstations,1))) >= 7,axis=1)\n",
        "print(result)\n",
        "print(result.shape)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0\n",
            " 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0\n",
            " 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0]\n",
            "(100,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DodtVEZ0bkC4"
      },
      "source": [
        "**Problem-1.2**: Busy stations show up in *at least* 50 paths? What are the busy stations and how many of them do we have?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t_EBiPbLFJQu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4607263e-a775-4469-f9a9-131fed5956e5"
      },
      "source": [
        "result = np.sum(np.dot(P, np.ones((nstations,1))) >= 50,axis=0)\n",
        "print(result)\n",
        "print(result.shape)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0]\n",
            "(1,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_pUjRy2Lb93a"
      },
      "source": [
        "**Problem-1.3**: Station-1 is *most similar* to which other station?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tQr4P_SqH7fP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "985d0632-d82d-46be-e611-488ffcdcc6c2"
      },
      "source": [
        "result = np.linalg.norm(P.T[:, :] - P[:, [0]][:,np.newaxis], axis = 0)\n",
        "print(\"the most similar the other station:\")\n",
        "print(f\"station\",np.argmin(result)+1)\n",
        "print(result)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the most similar the other station:\n",
            "station 2\n",
            "[[7.41619849 6.70820393 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393]\n",
            " [7.41619849 7.41619849 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 6.70820393 7.41619849]\n",
            " [6.70820393 6.70820393 6.70820393 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 7.41619849 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 7.41619849 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 7.41619849 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 7.41619849]\n",
            " [6.70820393 7.41619849 6.70820393 7.41619849 7.41619849 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393]\n",
            " [7.41619849 7.41619849 7.41619849 7.41619849 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393]\n",
            " [7.41619849 6.70820393 6.70820393 7.41619849 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393]\n",
            " [7.41619849 6.70820393 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393]\n",
            " [7.41619849 7.41619849 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393]\n",
            " [7.41619849 6.70820393 7.41619849 6.70820393 7.41619849 7.41619849\n",
            "  6.70820393 7.41619849 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 7.41619849 6.70820393\n",
            "  6.70820393 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 6.70820393 6.70820393 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393]\n",
            " [6.70820393 6.70820393 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 7.41619849 7.41619849\n",
            "  7.41619849 6.70820393 7.41619849 7.41619849 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 6.70820393 6.70820393 7.41619849\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  7.41619849 6.70820393 6.70820393 7.41619849 6.70820393 6.70820393\n",
            "  7.41619849 7.41619849 7.41619849 6.70820393 6.70820393 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 7.41619849 7.41619849 7.41619849\n",
            "  7.41619849 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 7.41619849 6.70820393 6.70820393 6.70820393 6.70820393\n",
            "  6.70820393 6.70820393 7.41619849 7.41619849 6.70820393 7.41619849\n",
            "  6.70820393 7.41619849 7.41619849 7.41619849 7.41619849 6.70820393\n",
            "  7.41619849 6.70820393 6.70820393 6.70820393]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V2sSq9rJciY_"
      },
      "source": [
        "**Problem-1.4**: Express the number of paths common to each pair of stations as a product of two matrices. How many paths are common to station-4 and station-10?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GPjahfxZJ6AA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b972235c-6136-4e72-8046-04afe95bea16"
      },
      "source": [
        "result = np.dot(P.T,P)\n",
        "print(result[3, 9])"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "23\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GZmdtCwldRcD"
      },
      "source": [
        "**Problem-1.5**: Express the number of stations common to each pair of paths as a product of two matrices. How many stations are common to the 1st path and the 100th path? How many stations do we have in the 100th path?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gELCUw7WMHKo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70a2de19-e649-4159-f0d3-b9ff7c24585d"
      },
      "source": [
        "result = np.dot(P.T,P)\n",
        "# Stations common to the 1st path and the 100th path\n",
        "print(result[0,9])\n",
        "# Number of stations in the 100th path\n",
        "print(result[:,9])"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "23\n",
            "[23 23 26 23 23 18 29 24 21 49]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wc9quPjuh6cj"
      },
      "source": [
        "**Problem-2**: A *compartmental system* is a model used to describe the movement of some material over time among a set of $n$ compartments of a system and the outside world. It is widely used in pharmaco-kinetics, the study of how the concentration of a drug varies over time in the body. In this application, the material is a drug, and the compartments are the bloodstream, lungs, heart, liver, kidneys, and so on. Compartmental systems are special cases of linear dynamical systems. In this problem we will consider a very simple compartmental system with $3$ compartments. We let $(x_t)_i$ denote the amount of the material (say, a drug) in compartment $i$ at time stamp $t.$ Between time stamps $t$ and $t+1,$ the material moves as follows:\n",
        "\n",
        "* 20% of the material in compartment 1 moves to compartment 2. (This decreases\n",
        "the amount in compartment 1 and increases the amount in compartment 2.)\n",
        "* 5% of the material in compartment 2 moves to compartment 1.\n",
        "* 5% of the material in compartment 2 moves to compartment 3.\n",
        "* 10% of the material in compartment 2 is eliminated.\n",
        "* 5% of the material in compartment 3 moves to compartment 1\n",
        "* 5% of the material in compartment 3 moves to compartment 2.\n",
        "\n",
        "This compartmental system can be modeled as a linear dynamical system, $x_{t+1} = Ax_t,$ where $A$ is the linear dynamics matrix."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M8DInKt5iz1Q"
      },
      "source": [
        "**Problem-2.1**: Construct the linear dynamics matrix $A.$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xeJd8roQaAaI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c629b3ec-8898-4f02-f704-d51ca4c9b211"
      },
      "source": [
        "# Linear dynamical system matrix\n",
        "A = np.array([[0.8,0.05,0.05],\n",
        "              [0.2,0.8,0.05],\n",
        "              [0.05,0.05,0.9]])\n",
        "print(A)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.8  0.05 0.05]\n",
            " [0.2  0.8  0.05]\n",
            " [0.05 0.05 0.9 ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dc-5koMtqjCn"
      },
      "source": [
        "**Problem-2.2**: Suppose that the initial concentration of the three drugs is 20%, 10%, and 70%, respectively. We want to simulate the linear dynamical system for 200 time stamps."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NFqaVDKKbpeb"
      },
      "source": [
        "# Time period\n",
        "T = 200\n",
        "\n",
        "# Initialize the three drug concentration values to zeros for all time stamps\n",
        "X = np.zeros((3, T))\n",
        "\n",
        "\n",
        "# Initial state vector\n",
        "X[:, 0] = np.array([0.2, 0.10, 0.70])\n",
        "\n",
        "# Simulate the linear dynamical system for all time stamps\n",
        "for j in np.arange(1, T):\n",
        "    X[:, j] = np.dot(A, X[:, j-1])"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sex5KmjjtcUV"
      },
      "source": [
        "**Problem-2.3**: Plot the concentrations of the three drugs for all time stamps. Which drug component shows an initial increase and then a decrease in its concentration? Approximately, at what time stamp does that drug concentration peak? Which drug component shows the least rapid change in the initial time stamps?"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "MdovQZqUuov6"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EYo66nFLcbFw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "outputId": "cd1efc0d-cc58-459e-9830-a95c805cb2f2"
      },
      "source": [
        "fig, ax = plt.subplots(1, 1, figsize = (6,6))\n",
        "fig.tight_layout(pad = 4.0)\n",
        "ax.plot(X[0, :])\n",
        "ax.plot(X[1, :])\n",
        "ax.plot(X[2, :])\n",
        "plt.legend([\"Drug-1\", \"Drug-2\", \"Drug-3\"], loc =\"upper right\")"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x79f84c1fd900>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}